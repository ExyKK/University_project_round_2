version: "3.9"

services:

  postgre:
    image: postgres:latest
    container_name: postgre_db
    volumes:
      - ./query/pg_up_1.sql:/docker-entrypoint-initdb.d/pg_up_1.sql
      - ./query/pg_up_2.sql:/docker-entrypoint-initdb.d/pg_up_2.sql
    environment:
      POSTGRES_DB: "University"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "tohi231"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d University"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    ports: 
      - 5432:5432
    networks:
      - net

  elastic:
    image: elasticsearch:8.9.2
    container_name: elastic_db
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    restart: unless-stopped
    ports: 
      - 9200:9200
    networks:
      - net
  
  neo4j:
    image: neo4j:latest
    container_name: neo4j_db
    ports: 
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s
    environment:
      NEO4J_AUTH: neo4j/tneo4j231
    networks:
      - net
  
  redis:
    image: redis:latest
    container_name: redis_bd
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=tredis231
      - REDIS_PORT=6379
      - REDIS_DATABESES=2

  mongodb:
    image: mongo:latest
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - 27017:27017

  app:
    build: .
    container_name: app
    ports: 
      - 5000:5000
    volumes:
      - .:/app
    depends_on:
      postgre:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
     - net

networks:
  net:
    driver: bridge
    